<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * Список сообщений с интро.
 * 
 * Объект вывода.
 * 
 * @author Rustam Akhmedov
 * @author Sanjar Akhmedov
 * 
 * $Id$
 */

class GBMsgHL extends WCObject {
	var $header;
	var $srvuri, $messageid, $pid;
	var $offset, $pageSize, $ids, $reverseOrder;
	var $more, $dateFormat;
	var $keywordKey;
	var $no404;
	var $fetchContent, $showUnpublished;
	
	function GBMsgHL() {
		$this->DSTable='dsguestbook';
		$this->ds_type='guestbook';
		$this->obj_type='gbmsghl';
		$this->offset=0;
		$this->pageSize=10;
		$this->pid='page';
		$this->srvuri='message/';
		$this->messageid='msg_id';
		$this->more='...';
		$this->dateFormat='[j.m.Y]';
		$this->fetchContent = false;
		$this->showUnpublished = false;
		$this->no404 = false;
		$this->caching=2;
		$this->cached_by_WC=true;
	}
	
	function getCacheId() {
		$cacheId = null;
		if(!$this->ids) {
			$page = (int) @$_GET[$this->pid];
			$displayed = &$this->getDisplayedDocs();
			if(--$page < 0) $page = 0;
			$cacheId = $this->obj_id.'|p'.$page.'-c'.implode(',', array_keys($displayed));
		}
		return $cacheId;
	}
	
	function fetchData(&$smarty) {
		$result = false;
		$page = (int) @$_GET[$this->pid];
		if(--$page < 0) $page = 0;
		
		$where = $this->ids ? 'd.id IN ('.$this->ids.')' : 'd.ds_id IN ('.$this->ds_id.')';
		$search = &WCObject::getSearchQuery($this->keywordKey, 'd');
		$db = &$this->ctx->_getDB();
		$res = $db->query(
			'SELECT d.id, d.ds_id, d.real_id as rid, d.subject, d.published, d.author, d.email, '.($this->fetchContent?'d.html, ':'').'d.date'.
			' FROM '.$this->DSTable.' d'.$search['from'].
			' WHERE '.$where.($this->showUnpublished?' ':' AND d.published!=0 ').$search['where'].
			' ORDER BY '.($search['order'] ? $search['order'] : 'd.date' ).($this->reverseOrder ? ' ASC' : ' DESC').
			' LIMIT '.($this->offset + $page*$this->pageSize).', '.$this->pageSize
		);
		if((($n = mysql_num_rows($res)) == 0) && $page > 1 && !$this->no404) {
			$this->ctx->throw404();
		} else {
			if($n > 0) {
				$fet = array();
				$displayed = &$this->getDisplayedDocs();
				$href = $this->ctx->getPatternFor($this->srvuri, $this->messageid);
				while($row = mysql_fetch_assoc($res)) {
					if(isset($fet[$row['rid']])) continue;
					$fet[$row['rid']] = true;
					$messages[$row['id']]['ds_id'] = (int) $row['ds_id'];
					$messages[$row['id']]['subject'] = escapeTags($row['subject']);
					$messages[$row['id']]['href'] = isset($displayed[$row['id']]) ? '' : sprintf(&$href, $row['id']);
					$messages[$row['id']]['published'] = (int) $row['published'];
					$messages[$row['id']]['author'] = escapeTags($row['author']);
					$messages[$row['id']]['email'] = htmlspecialchars($row['email'], ENT_COMPAT, 'UTF-8');
					$messages[$row['id']]['html'] = $row['html'];
					$messages[$row['id']]['date'] = wcfFormatTime($this->dateFormat, $row['date']);
				}
			} else
				$messages = array();
			$smarty->assign('header',$this->header);
			$smarty->assign_by_ref('more',$this->more);
			$smarty->assign_by_ref('messages',$messages);
			$result = array('header', 'more', 'messages');
		}
		mysql_free_result($res);
		return $result;
	}
	
	function &getDisplayedDocs() {
		if(!isset($this->_dispalyedDocs))
			$this->_displayedDocs = class_exists('gbmsgbody') ? GBMsgBody::getDisplayedDocs() : array();
		return $this->_displayedDocs;
	}
}
?>