<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 *
 * All rights reserved.
 *
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 *
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 *
 * @author Sanjar Akhmedov
 *
 * $Id: wcsmarty._wc,v 1.7 2007/04/24 21:49:07 sanjar Exp $
 */
require(SMARTY_DIR.'Smarty.class.php');

class WCSmarty extends Smarty {
	var $_object_stack = array();
	var $_fr = array(); // used by foreach_row plugin
	var $_ctx = null;
	var $_fetchLevel = 0;

	function WCSmarty() {
		$this->Smarty();
		$this->use_sub_dirs = true;
		$this->template_dir = ROOT.WC_SMARTY_TEMPLATES;
		$this->plugins_dir = array(
			SMARTY_DIR.'plugins',
			LIBDIR.'/smarty/plugins',
			ROOT.FILES.'/smarty/plugins'
			);
		$this->compile_dir = ROOT.FILES.'/smarty/compiled';
		$this->config_dir = ROOT.FILES.'/smarty/configs';
		$this->cache_dir = ROOT.FILES.'/smarty/cache';
		$this->compile_check = false;
		$this->caching = false;

		$this->security = true;
		$this->secure_dir = array(ROOT.WC_SMARTY_TEMPLATES, LIBDIR.'/tpl');
		$this->security_settings = array(
			'IF_FUNCS' => array('count', 'isset', 'sizeof', 'is_array'),
			'INCLUDE_ANY' => false,
			'PHP_TAGS' => false,
			'MODIFIER_FUNCS' => array('sprintf', 'count', 'sizeof', 'join', 'explode', 'substr'),
			'ALLOW_CONSTANTS' => false
		);
		$this->trusted_dir = array(ROOT.FILES.'/php');
		$this->register_function('run_block', 'smarty_func_run_block', true);
		$this->register_function('href', 'smarty_func_href', true);
		$this->register_modifier('implode', 'smarty_mod_implode', true);
		$this->register_modifier('ftime', 'smarty_mod_ftime', true);
		$this->register_modifier('fdate', 'smarty_mod_fdate', true);
		$this->debugging = false;
		$this->_dir_perms = 0777;
		$this->_file_perms = 0777;
	}

    function &fetch($resource_name, $cache_id = null, $compile_id = null, $display = false) {
		if($this->_fetchLevel == 1) {
			$oldOutputFilters = $this->_plugins['outputfilter'];
			$this->_plugins['outputfilter'] = array();
		}
		$this->_fetchLevel++;
		$result = parent::fetch($resource_name, $cache_id, $compile_id, $display);
		$this->_fetchLevel--;
		if(isset($oldOutputFilters))
			$this->_plugins['outputfilter'] = $oldOutputFilters;
		return $result;
    }
}

function smarty_func_run_block($params, &$smarty) {
	$ctx = &$smarty->_ctx;
	if($ctx->page->status == 404)
		return;
	$obj = &$ctx->getObjectAt(@$params['id']);
	if($obj !== null) {
		if(!isset($smarty->_object_stack[$obj->obj_id])) {
			$smarty->_object_stack[$obj->obj_id] = true;
			unset($params['id']);
			if(is_array($obj)) {
				for($i = 0, $l = sizeof($obj); $i < $l; $i++)
					$obj[$i]->exec(&$smarty, $params);
			} else
				$obj->exec(&$smarty, $params);
			unset($smarty->_object_stack[$obj->obj_id]);
		} else {
			$smarty->trigger_error('run_block: Recursive call. Stack = [ '.implode(' &gt; ', array_keys($smarty->_object_stack)).' &gt; <b>'.$obj->obj_id.'</b> ]');
		}
	}
}

function smarty_mod_implode($array, $glue = '') {
	return is_array($array) ? implode($glue, $array) : $array;
}

function smarty_mod_ftime($time, $format, $offset = null) {
	return wcfFormatTime($format, $time, $offset);
}

function smarty_mod_fdate($date, $format, $offset = null) {
	return wcfFormatTime($format, strtotime($date), $offset);
}

function smarty_func_href($params, &$smarty) {
	static $cache;
	if(isset($params['uri'])) {
		$uri = $params['uri']; unset($params['uri']);
		// ksort($params);
		$p = array_keys($params); $v = array_values($params);
		$uid = $uri.' '.implode(' ', $p);
		if(isset($cache[$uid])) {
			$pattern = &$cache[$uid];
		} else {
			$pattern = &$smarty->_ctx->getPatternFor($uri, $p);
			$cache[$uid] = $pattern;
		}
		return vsprintf($pattern, $v);
	} else {
		$smarty->trigger_error('href: Missing "uri" param');
	}
	return '';
}

function smarty_outputfilter_gzip($output, &$smarty) {
	$result = null;
	$ctx = &Context::getInstance();
	if(headers_sent()) {
		$ctx->page->_cacheGz = false;
		$result = &$output;
	} else {
		if(($result = gzencode($output, WC_PAGE_CACHE_GZ)) === false) {
			$result = &$output;
			$ctx->page->_cacheGz = false;
		} else
			$ctx->page->_cacheGz = true;
	}
	return $result;
}
?>