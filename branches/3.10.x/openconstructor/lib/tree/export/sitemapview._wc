<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * @author Sanjar Akhmedov
 * 
 * $Id: sitemapview._wc,v 1.5 2007/02/27 11:23:21 sanjar Exp $
 */

class TreeSiteMapView {
	var $tree;
	var $offset;
	
	function TreeSiteMapView() {
		$this->tree = null;
		$this->selectedNodeId = 0;
	}
	
	function exportNode(&$node, $level = 0) {
		$result = '';
		if($node->published) {
			if($node->id == $this->tree->root->id)
				$result .= sprintf(
					"\$m = & new SiteMap();\n\$m->_root($node->id, '%s', %s);\n"
					, $node->header, strpos($node->users, ',') ? "array($node->users)" : intval($node->users)
				);
			else
				$result .= sprintf(
						"%s\$m->_add({$node->parent->id}, $node->id, %d, %d, '%s', '%s'%s%s);\n"
						, str_repeat("\t", $level - 1), $node->index + $this->_getIndexOffset($node->index), $node->next + $this->_getNextOffset($node->next), $node->key, addslashes($node->header)
						, $node->router ? ', 1' : ''
						, $node->users == $node->parent->users || $node->users == WCS_EVERYONE_ID
							? ''
							: ($node->router ? '' : ', 0').(strpos($node->users, ',') ? ", array($node->users)" : ', '.$node->users)
					);
			if(sizeof($node->node))
				foreach($node->node as $k => $v)
					$result .= $this->exportNode(&$node->node[$k], $level + 1);
			if($node->id == $this->tree->root->id)
				$result .= "\$map = &\$m;\nunset(\$m);\n";
		}
		return $result;
	}
	
	function setTree(&$tree) {
		$this->tree = &$tree;
	}
	
	function _getIndexOffset($index) {
		$result = 0;
		if(!is_array($this->offset))
			$this->_calculateOffsets();
		for($i = 0; $i < $index; $i++)
			$result -= $this->offset[$i];
		return $result;
	}
	
	function _getNextOffset($index) {
		$result = 0;
		if($index > 0) {
			if(!is_array($this->offset))
				$this->_calculateOffsets();
			if($this->offset[$index] == 0) {
				$result = $this->_getIndexOffset($index);
			} else {
				$l = sizeof($this->offset);
				for($i = $index; $i < $l && $this->offset[$i] > 0; $i++)
					;
				$result = $i == $l ? -$index : -$index + $i + $this->_getIndexOffset($i);
			}
		}
		return $result;
	}
	
	function _calculateOffsets() {
		$nodes = array_keys($this->tree->node);
		foreach($nodes as $id) {
			$node = &$this->tree->node[$id];
			$this->offset[$node->index] = $node->published ? 0 : 1;
		}
	}
}
?>