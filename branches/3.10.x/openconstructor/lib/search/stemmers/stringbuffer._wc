<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * StringBuffer - A very weak implementation of StringBuffer java class
 * 
 * @author Anton A. Kovalyov
 * @author Sanjar Akhmedov
 * 
 * $Id: stringbuffer._wc,v 1.4 2007/02/27 11:23:26 sanjar Exp $
 */
require_once(LIBDIR_THIRD.'/phputf8/utils/unicode.php');

class StringBuffer {
	var $data;
	var $_length, $_chars;
	
	// Default and single constructor
	function StringBuffer($string) {
		$this->setString($string);
	}
	
	// Sets specified length
	function setLength($length) {
		if($length != $this->getLength()) {
			if($length < $this->getLength())
				$this->setString(utf8_substr($this->data, 0, $length));
			else
				$this->setString($this->data.str_repeat(' ', $length - $this->getLength()));
		}
	}
	
	// Gets $data's length
	function getLength() {
		return $this->_length;
	}
	
	// Gets char at specified position
	function charAt($index) {
		return utf8_substr($this->data, $index, 1);
	}
	
	// Gets charcode at specified position
	function charCodeAt($index) {
		return $this->_chars[$index];
	}
	
	// Gets string
	function getString() {
		return $this->data;
	}
	
	// Sets string
	function setString($string) {
		$this->data = $string;
		$this->_chars = utf8_to_unicode($this->data);
		$this->_length = sizeof($this->_chars);
	}
}
?>