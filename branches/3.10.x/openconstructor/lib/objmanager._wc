<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 *
 * All rights reserved.
 *
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 *
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 *
 * @author Sanjar Akhmedov
 *
 * $Id: objmanager._wc,v 1.17 2007/02/27 11:23:18 sanjar Exp $
 */
require_once('wcobject._wc');

class ObjManager {
	var $map;
	var $pageSize;
	var $smartycache;

	function ObjManager() {
		$this->map=array(
			'htmltext'=>array(DS_HTMLTEXT=>array(
				'htmltextbody'=>OBJ_HTMLTEXT_BODY,
				'htmltexthl'=>OBJ_HTMLTEXT_HL,
				'htmltexthlintro'=>OBJ_HTMLTEXT_HL_INTRO
			)),
			'publication'=>array(DS_PUBLICATION=>array(
				'publicationhl'=>OBJ_PUBLICATION_HL,
				'publicationhlintro'=>OBJ_PUBLICATION_HL_INTRO,
				'publicationlist'=>OBJ_PUBLICATION_LIST,
				'publicationlistintro'=>OBJ_PUBLICATION_LIST_INTRO,
				'publicationmainintro'=>OBJ_PUBLICATION_MAIN_INTRO,
				'publicationbody'=>OBJ_PUBLICATION_BODY,
				'publicationpager'=>OBJ_PUBLICATION_PAGER
			)),
			'event'=>array(DS_EVENT=>array(
				'eventcalendar'=>OBJ_EVENT_CALENDAR,
				'eventhl'=>OBJ_EVENT_HL,
				'eventhlintro'=>OBJ_EVENT_HL_INTRO,
				'eventbody'=>OBJ_EVENT_BODY,
				'eventpager'=>OBJ_EVENT_PAGER
			)),
			'gallery'=>array(DS_GALLERY=>array(
				'galleryhl'=>OBJ_GALLERY_HL,
				'gallerypager'=>OBJ_GALLERY_PAGER,
				'galleryimage'=>OBJ_GALLERY_IMAGE,
				'galleryimgpager'=>OBJ_GALLERY_IMG_PAGER
			)),
			'article'=>array(DS_ARTICLE=>array(
				'articlehl'=>OBJ_ARTICLE_HL,
				'articlehlintro'=>OBJ_ARTICLE_HL_INTRO,
				'articlebody'=>OBJ_ARTICLE_BODY,
				'articlebodypager'=>OBJ_ARTICLE_BODY_PAGER,
				'articlerelated'=>OBJ_ARTICLE_RELATED,
				'articlepager'=>OBJ_ARTICLE_PAGER
			)),
			'textpool'=>array(DS_TEXTPOOL=>array(
				'textrandom'=>OBJ_TEXT_RANDOM
			)),
			'guestbook'=>array(DS_GUESTBOOK=>array(
				'gbmsghl'=>OBJ_GB_MSG_HL,
				'gballmessages'=>OBJ_GB_ALL_MESSAGES,
				'gbmsgbody'=>OBJ_GB_MSG_BODY,
				'gbaddmsglogic'=>OBJ_GB_ADDMSG_LOGIC,
				'gbpager'=>OBJ_GB_PAGER,
				'gblist'=>OBJ_GB_LIST
			)),
			'file'=>array(DS_FILE=>array(
				'filehl'=>OBJ_FILE_HL,
				'filepager'=>OBJ_FILE_PAGER
			)),
			'phpsource'=>array(DS_PHPSOURCE=>array(
				'phpinclude'=>OBJ_PHP_INCLUDE,
				'phpcallback'=>OBJ_PHP_CALLBACK
			)),
			'hybrid'=>array(DS_HYBRID=>array(
				'hybridtree'=>OBJ_HYBRID_TREE,
				'hybridhl'=>OBJ_HYBRID_HL,
				'hybridbar'=>OBJ_HYBRID_BAR,
				'hybridbody'=>OBJ_HYBRID_BODY,
				'hybridpager'=>OBJ_HYBRID_PAGER,
				'hybridbodyedit'=>OBJ_HYBRID_BODY_EDIT
			)),
			'rating'=>array(DS_RATING=>array(
				'ratingrate'=>OBJ_RATING_RATE,
				'ratingratelogic'=>OBJ_RATING_RATELOGIC
			)),
			'search'=>array(DS_SEARCH=>array(
				'searchdss'=>OBJ_SEARCH_DSS,
				'searchdsspager'=>OBJ_SEARCH_DSS_PAGER
			)),
			'users'=>array(DS_USERS=>array(
				'usersauthorize'=>OBJ_USERS_AUTHENTICATE,
				'userslogout'=>OBJ_USERS_LOGOUT
			)),
			'miscellany'=>array(DS_MISCELLANY=>array(
				'miscfetchtpl' => OBJ_MISC_FETCHTPL,
				'misccrumbs'=>OBJ_MISC_CRUMBS,
				'miscsendmail'=>OBJ_MISC_SENDMAIL,
				'miscinjector'=>OBJ_MISC_INJECTOR
			))

		);
		$this->pageSize=30;
	}

	function &get_objects($ds_type, $obj_type, $page=1, $searchclause='', $pageSize = null) {
		$result = array();
		$page = intval($page);
		if(--$page<0) $page=0;
		if(!$pageSize)
			$pageSize = $this->pageSize;
		$db = &WCDB::bo();
		$res = $db->query(
			'SELECT o.id, o.name, o.description, o.date, COUNT(s.page_id) AS used'.
			' FROM objects o LEFT JOIN siteobjects s ON (o.id = s.obj_id)'.
			' WHERE o.ds_type="'.$ds_type.'" AND o.obj_type="'.$obj_type.'" '.$searchclause.
			' GROUP BY o.id'.
			' ORDER BY o.name'.
			($pageSize != -1
				? ' LIMIT '.($page * $pageSize).','.$pageSize
				: ''
			)
		);
		if(mysql_num_rows($res) > 0)
			while($row = mysql_fetch_assoc($res))
				$result[$row['id']] = array(
					'name' => $row['name'],
					'description' => $row['description'],
					'published' => $row['used'] > 0,
					'date' => date('j M Y', $row['date'])
				);
		mysql_free_result($res);
		return $result;
	}

	function &get_all_objects() {
		$result = array();
		$db = &WCDB::bo();
		$res = $db->query(
			'SELECT id, ds_type, obj_type, name, description FROM objects ORDER BY ds_type, obj_type, name'
		);
		if(mysql_num_rows($res) > 0)
			while($r = mysql_fetch_assoc($res))
				$result[$r['id']]=array(
					'ds_type'=>key($this->map[$r['ds_type']]),
					'obj_type'=>$r['obj_type'],
					'obj_type_f'=>$this->map[$r['ds_type']][key($this->map[$r['ds_type']])][$r['obj_type']],
					'name'=>$r['name'],
					'description'=>$r['description']
				);
		return $result;
	}

	function create(&$obj) {
		System::assert('objects.ds'.$obj->ds_type);
		assert(!$obj->obj_id > 0);
		if(!$obj->caching)
			$obj->cached_by_WC = true;
		$auth = &Authentication::getInstance();
		ObjManager::loadAuths($obj, 0, 0, constant('WCS_WCOBJECT_MASK'), null);
		$oAuths = $obj->sRes->getOwnerAuths();
		$gAuths = $obj->sRes->getGroupAuths();
		unset($obj->sRes);
		$db = &WCDB::bo();
		$db->query(
			sprintf(
				'INSERT INTO objects (ds_id, ds_type, obj_type, cache_by_wc, wcsowner, wcsgroup, oauths, gauths, name, description, date, code) '.
				" VALUES ('$obj->ds_id', '$obj->ds_type', '$obj->obj_type'".
				", %d, %d, %d, CONV('%s', 2, 10), CONV('%s', 2, 10), '%s', '%s', '%s','%s')"
				, intval($obj->cached_by_WC), $auth->userId, $auth->groupId, $oAuths, $gAuths
				, addslashes($obj->name), addslashes($obj->description), time(), addslashes(serialize(&$obj))
			)
		);
		$id = (int) $db->lastInsertId();
		$obj = &ObjManager::load($id);
		return $id;
	}

	function save(&$obj) {
		assert($obj->obj_id > 0 && trim($obj->name) != '');
		$old = &ObjManager::load($obj->obj_id);
		WCS::assert($old, 'editobj');
		if(!WCS::decide($old, 'editobj.tpl')) {
			$obj->tpl = $old->tpl;	$obj->caching = $old->caching;	$obj->cache_lifetime = $old->cache_lifetime;	$obj->cached_by_WC = $old->cached_by_WC;
		}
		if(!$obj->caching) $obj->cached_by_WC = true;
		if(!WCS::decide($old, 'editobj.ds'))
			for($i = 0, $ds = $obj->_getDSFields(), $l = sizeof($ds); $i < $l; $i++)
				$obj->$ds[$i] = @$old->$ds[$i];
		$clone = wcfClone($obj);
		unset($clone->sRes);
		$db = &WCDB::bo();
		$db->query(
			'UPDATE objects '.
			"SET ds_id='$obj->ds_id', tpl='$obj->tpl', cache_by_wc=".intval($obj->cached_by_WC).", name='".addslashes($obj->name)."', description='".addslashes($obj->description)."', date='".time()."', code='".addslashes(serialize($clone))."' ".
			'WHERE id='.$obj->obj_id
		);
		if($obj != $old)
			ObjManager::_republishPages(ObjManager::_getUsingPages('o.id = '.$obj->obj_id));
		if($obj->cached_by_WC) {
			loadClass('wcsmartycache', '/smarty/wcsmartycache._wc');
			$smc = &WCSmartyCache::getInstance();
			$smc->object_updated($obj->ds_type, $obj->obj_id);
		}
	}

	function remove($ids) {
		assert($ids > 0 && strspn($ids, ',0123456789') == strlen($ids));
		$db = &WCDB::bo();
		$res = $db->query("SELECT ds_type FROM objects WHERE id IN($ids) LIMIT 1");
		list($ds_type) = mysql_fetch_row($res);
		mysql_free_result($res);

		$sCheck = WCS::getAuthCheckQuery('remove', 'o');
		$pages = ObjManager::_getUsingPages("o.id IN({$ids}) AND {$sCheck}");
		$db->query("DELETE s.* FROM objects o, siteobjects s WHERE o.id IN($ids) AND $sCheck AND o.id = s.obj_id");
		$db->query("DELETE o.* FROM objects o WHERE o.id IN($ids) AND $sCheck");
		ObjManager::_republishPages($pages);

		loadClass('wcsmartycache', '/smarty/wcsmartycache._wc');
		$smc = &WCSmartyCache::getInstance();
		$smc->object_updated($ds_type, $ids);
	}

	function &load($objId) {
		$result = null;
		settype($objId, 'int');
		$db = &WCDB::bo();
		$res = $db->query("SELECT id, ds_type, obj_type, tpl, wcsowner, wcsgroup, BIN(ROUND(oauths)) as oauths, BIN(ROUND(gauths)) as gauths, code FROM objects WHERE id = $objId");
		if(mysql_num_rows($res) == 1) {
			$r = mysql_fetch_assoc($res);
			require_once($r['ds_type'].($r['ds_type'] == 'hybrid' ? '/view/' : '/').$r['obj_type'].'._wc');
			$result = &WCObject::_loadFrom($r);
			ObjManager::loadAuths($result, $r['wcsowner'], $r['wcsgroup'], $r['oauths'], $r['gauths']);
		}
		mysql_free_result($res);
		return $result;
	}

	function updateAuths(&$obj) {
		assert($obj->obj_id > 0);
		$querySet = '';
		$userId = Authentication::getUserId();
		if($obj->sRes->owner > 0 && $userId == WCS_ROOT_ID)
			$querySet .= ", wcsowner = {$obj->sRes->owner}";
		if($obj->sRes->group > 0 && $userId == WCS_ROOT_ID)
			$querySet .= ", wcsgroup = {$obj->sRes->group}";
		$querySet .= sprintf(', oauths = CONV("%s", 2, 10), gauths = CONV("%s", 2, 10)', $obj->sRes->getOwnerAuths(), $obj->sRes->getGroupAuths());
		if($querySet) {
			$querySet = substr($querySet, 1);
			$db = &WCDB::bo();
			$db->query("UPDATE objects SET $querySet WHERE id = {$obj->obj_id} AND ".WCS::getAuthCheckQuery('editobj.chmod'));
		}
	}

	function updateObjectsAuths(&$ids, &$set, &$unset) {
		assert($ids > 0 && strspn($ids, ',0123456789') == strlen($ids));
		$userId = Authentication::getUserId();
		$querySet = '';
		if($set->owner > 0 && $userId == WCS_ROOT_ID)
			$querySet .= "wcsowner = {$set->owner}, ";
		if($set->group > 0 && $userId == WCS_ROOT_ID)
			$querySet .= "wcsgroup = {$set->group}, ";
		$db = &WCDB::bo();
		$db->query(
			sprintf("UPDATE objects SET $querySet oauths = (ROUND(oauths) | CONV('%s', 2, 10)) & CONV('%s', 2, 10), gauths = (ROUND(gauths) | CONV('%s', 2, 10)) & CONV('%s', 2, 10) WHERE id IN ($ids) AND %s"
				, $set->getOwnerAuths(), $unset->getOwnerAuths(), $set->getGroupAuths(), $unset->getGroupAuths(), WCS::getAuthCheckQuery('editobj.chmod')
			)
		);
	}

	function &getAggregateObject(&$ids) {
		assert($ids > 0 && strspn($ids, ',0123456789') == strlen($ids));
		$result = null;
		$db = &WCDB::bo();
		$res = $db->query("SELECT BIN(BIT_AND(ROUND(oauths))) as setoauths, BIN(BIT_AND(ROUND(gauths))) as setgauths, BIN(~BIT_AND(~ROUND(oauths))) as unsetoauths, BIN(~BIT_AND(~ROUND(gauths))) as unsetgauths FROM objects WHERE id IN($ids)");
		if(mysql_num_rows($res) == 1) {
			$obj = &ObjManager::load((int) $ids);
			assert($obj != null);
			$obj->obj_id = 0;
			$result = array($obj, $obj);
//			unset($result[1]->sRes);
			$result[1]->sRes = &$result[0]->sRes->copy();
			$r = mysql_fetch_row($res);
			$result[0]->sRes->setAuthorities($r[0], $r[1]);
			$result[1]->sRes->setAuthorities($r[2], $r[3]);
			mysql_free_result($res);
			$res = $db->query("SELECT DISTINCT wcsowner FROM objects WHERE id IN ($ids) LIMIT 2");
			$result[0]->sRes->setOwner((int) mysql_result($res, 0 , 'wcsowner'));
			$result[1]->sRes->setOwner(mysql_num_rows($res) == 1 ? $result[0]->sRes->owner : -1);
			mysql_free_result($res);
			$res = $db->query("SELECT DISTINCT wcsgroup FROM objects WHERE id IN ($ids) LIMIT 2");
			$result[0]->sRes->setGroup((int) @mysql_result($res, 0 , 'wcsgroup'));
			$result[1]->sRes->setGroup(mysql_num_rows($res) == 1 ? $result[0]->sRes->group : -1);
		}
		mysql_free_result($res);
		return $result;
	}

	function loadAuths(&$obj, $owner, $group, $ownerAuths, $groupAuths) {
		$obj->sRes = new WCSResource(&$obj->name, (int) $owner, (int) $group);

		$obj->sRes->addAction('editobj');
		$obj->sRes->addAction('editobj.tpl');
		$obj->sRes->addAction('editobj.chmod');
		$obj->sRes->addAction('editobj.ds');
		$obj->sRes->addAction('removeobj');

		$obj->sRes->setAuthorities($ownerAuths, $groupAuths);
	}

	function isObserverClass($class) {
		static $observers;
		if(!is_array($observers))
			$observers = array_flip(array('phpcallback'));
		return isset($observers[$class]);
	}

	function isCrumbsClass($class) {
		static $crumbs;
		if(!is_array($crumbs))
			$crumbs = array_flip(array(
				'articlebody',
				'eventbody', 'eventcalendar',
				'galleryimage',
				'gbmsgbody',
				'hybridbody', 'hybridhl', 'hybridtree',
				'publicationbody', 'publicatoinmainintro'
			));
		return isset($crumbs[$class]);
	}

	function _getUsingPages($objIdsCheck) {
		assert(strpos($objIdsCheck, ';') === false);
		$result = array();
		$db = &WCDB::bo();
		$res = $db->query("SELECT s.page_id FROM objects o, siteobjects s, sitepages p WHERE {$objIdsCheck} AND s.obj_id = o.id AND p.id = s.page_id AND p.published AND s.observer GROUP BY s.page_id");
		for($i = 0, $l = mysql_num_rows($res); $i < $l; $i++)
			list($result[]) = mysql_fetch_row($res);
		mysql_free_result($res);
		return $result;
	}

	function _republishPages($pageIds) {
		if(sizeof($pageIds) > 0) {
			require_once(LIBDIR.'/site/pagefactory._wc');
			$pf = &PageFactory::getInstance();
			WCS::runAs(WCS_ROOT_ID);
			foreach($pageIds as $id)
				$pf->publishPage($id);
			WCS::stopRunAs();
		}
	}
}
?>