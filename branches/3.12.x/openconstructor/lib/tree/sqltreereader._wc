<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * @author Sanjar Akhmedov
 * 
 * $Id: sqltreereader._wc,v 1.6 2007/02/27 11:23:21 sanjar Exp $
 */
require_once('tree._wc');

class SqlTreeReader {
	var $table;
	
	function SqlTreeReader() {
		$this->table = 'catalogtree';
	}
	
	function &getChildren($nodeId) {
		$result = array();
		$db = WCDB::bo();
		$res = $db->query(
			"SELECT t2.id AS id, t2.num AS num, t2.parent AS parent, t2.next AS next, t2.name AS name, t2.header AS header".
			" FROM $this->table t1, $this->table t2".
			" WHERE t1.id = $nodeId AND t2.num > t1.num AND ( t1.next = 0 OR t2.num < t1.next ) AND t2.level = t1.level + 1".
			" ORDER BY t2.num"
		);
		if(mysql_num_rows($res) > 0)
			while($r = mysql_fetch_assoc($res))
				$result[] = new Node((int) $r['id'],(int) $r['num'],(int) $r['parent'],(int) $r['next'], $r['name'], $r['header']);
		mysql_free_result($res);
		return $result;
	}
	
	function &getTree($nodeId, $depth = 0) {
		$tree = null;
		$db = WCDB::bo();
		$res = $db->query(
			"SELECT t2.id AS id, t2.num AS num, t2.parent AS parent, t2.next AS next, t2.name AS name, t2.header AS header".
			" FROM $this->table t1, $this->table t2".
			" WHERE t1.id = $nodeId AND t2.num >= t1.num AND ( t1.next = 0 OR t2.num < t1.next)".($depth ? " AND t2.level <= t1.level + $depth":'').
			" ORDER BY t2.level, t2.num"
		);
		if(mysql_num_rows($res) > 0) {
			$i = 0;
			while($r = mysql_fetch_assoc($res)) {
				$node[$i] = new Node((int) $r['id'],(int) $r['num'],(int) $r['parent'],(int) $r['next'], $r['name'], $r['header']);
				if($tree === null)
					$tree = new Tree($node[$i]);
				else
					$tree->addNode($node[$i]);
				$i++;
			}
		}
		mysql_free_result($res);
		return $tree;
	}
	
	function &getPartialTree($nodeIds, $depth = 0) {
		$tree = null;
		$db = WCDB::bo();
		$res = $db->query(
			"SELECT t2.id AS id, t2.num AS num, t2.parent AS parent, t2.next AS next, t2.name AS name, t2.header AS header".
			" FROM $this->table t1, $this->table t2".
			' WHERE t1.id IN ('.implode(',',$nodeIds).') AND ((t2.num >= t1.num AND ( t1.next = 0 OR t2.num < t1.next)'.($depth ? " AND t2.level <= t1.level + $depth)" : ')').' OR (t1.id = '.intval(current($nodeIds)).' AND t2.id = t1.parent))'.
			" ORDER BY t2.level, t2.num"
		);
		if(mysql_num_rows($res) > 0) {
			$i = 0;
			while($r = mysql_fetch_assoc($res)) {
				$node[$i] = new Node((int) $r['id'],(int) $r['num'],(int) $r['parent'],(int) $r['next'], $r['name'], $r['header']);
				if($tree === null)
					$tree = new Tree($node[$i]);
				else
					$tree->addNode($node[$i]);
				$i++;
			}
		} else {
			$root = new Node(-1, -1, -1, -1, '','');
			$tree = new Tree($root);
		}
		mysql_free_result($res);
		return $tree;
	}
	
	function &getNode($nodeId) {
		$node = null;
		settype($nodeId, 'int');
		$db = WCDB::bo();
		$res = $db->query("SELECT id, num, parent, next, name, header FROM catalogtree WHERE id = $nodeId");
		if(mysql_num_rows($res) == 1) {
			$r = mysql_fetch_assoc($res);
			$node = new Node((int) $r['id'],(int) $r['num'],(int) $r['parent'],(int) $r['next'], $r['name'], $r['header']);
		}
		mysql_free_result($res);
		return $node;
	}
	
	function &getRootNode($subNodeId) {
		$node = null;
		settype($subNodeId, 'int');
		$db = WCDB::bo();
		$res = $db->query(
			"SELECT t2.id AS id, t2.num AS num, t2.parent AS parent, t2.next AS next, t2.name AS name, t2.header AS header".
			" FROM catalogtree t1, catalogtree t2".
			" WHERE t1.id = $subNodeId AND t2.num <= t1.num AND ( t2.next = 0 OR (t1.next > 0 AND t2.next >= t1.next)) AND t2.level > 0 AND t2.level <= t1.level".
			" ORDER BY t2.num".
			" LIMIT 1"
		);
		if(mysql_num_rows($res) == 1) {
			$r = mysql_fetch_assoc($res);
			$node = new Node((int) $r['id'],(int) $r['num'],(int) $r['parent'],(int) $r['next'], $r['name'], $r['header']);
			self::loadAuths($node);
		}
		mysql_free_result($res);
		return $node;
	}
	
	function loadAuths(&$node, $owner = -1, $group = null, $ownerAuths = null, $groupAuths = null) {
		if($owner === -1) {
			$db = WCDB::bo();
			$res = $db->query('SELECT wcsowner, wcsgroup, BIN(ROUND(oauths)) as oauths, BIN(ROUND(gauths)) as gauths FROM catalogtree WHERE id = '.intval($node->id));
			if(mysql_num_rows($res) == 1)
				list($owner, $group, $ownerAuths, $groupAuths) = mysql_fetch_row($res);
			mysql_free_result($res);
		}
		$node->sRes = new WCSResource($node->header, (int) $owner, (int) $group);
		
		$node->sRes->addAction('edittree');
		$node->sRes->addAction('edittree.chmod');
		$node->sRes->addAction('managetree');
		$node->sRes->addAction('removetree');
		
		$node->sRes->setAuthorities($ownerAuths, $groupAuths);
	}
}
?>