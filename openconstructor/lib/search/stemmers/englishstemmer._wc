<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * @author Sanjar Akhmedov
 * $Id: englishstemmer._wc,v 1.3 2007/02/27 11:23:26 sanjar Exp $
 * 
 * Based on PHP5 implemenation by Richard Heyes (http://www.phpguru.org/)
 */

class EnglishStemmer {
	var $_c = '(?:[bcdfghjklmnpqrstvwxz]|(?<=[aeiou])y|^y)';
	var $_v = '(?:[aeiou]|(?<![aeiou])y)';
	var $_cache = array();
	
	function stem($word, $cache = false) {
		if(strlen($word) <= 2)
			return $word;
	
		if($cache && !empty($this->_cache[$word]))
			return $this->_cache[$word];
		
		$stem = preg_replace("~('ve|n't|'d)$~", '', $word);
	
		$stem = EnglishStemmer::_step1ab($stem);
		$stem = EnglishStemmer::_step1c($stem);
		$stem = EnglishStemmer::_step2($stem);
		$stem = EnglishStemmer::_step3($stem);
		$stem = EnglishStemmer::_step4($stem);
		$stem = EnglishStemmer::_step5($stem);
	
		if($cache)
			$this->_cache[$word] = $stem;
		
		return $stem;
	}
	
	function _step1ab($word) {
		// Part a
		if(substr($word, -1) == 's')
			EnglishStemmer::_replace($word, 'sses', 'ss')
			|| EnglishStemmer::_replace($word, 'ies', 'i')
			|| EnglishStemmer::_replace($word, 'ss', 'ss')
			|| EnglishStemmer::_replace($word, 's', '');
		
		// Part b
		if(substr($word, -2, 1) != 'e' || !EnglishStemmer::_replace($word, 'eed', 'ee', 0)) { // First rule
			$v = &$this->_v;
		
			if(preg_match("~$v+~", substr($word, 0, -3)) && EnglishStemmer::_replace($word, 'ing', '')
				|| preg_match("~$v+~", substr($word, 0, -2)) && EnglishStemmer::_replace($word, 'ed', '')) { // Note use of && and ||, for precedence reasons
		
				if(!EnglishStemmer::_replace($word, 'at', 'ate')
					&& !EnglishStemmer::_replace($word, 'bl', 'ble')
					&& !EnglishStemmer::_replace($word, 'iz', 'ize')) {
		
					if(EnglishStemmer::_doubleConsonant($word)
						&& substr($word, -2) != 'll'
						&& substr($word, -2) != 'ss'
						&& substr($word, -2) != 'zz') {
						
						$word = substr($word, 0, -1);
					
					} elseif(EnglishStemmer::_occurrences($word) == 1 && EnglishStemmer::_cvc($word)) {
						$word .= 'e';
					}
				}
			}
		}
		
		return $word;
	}
	
	function _step1c($word) {
		$v = &$this->_v;
		if(substr($word, -1) == 'y' && preg_match("~$v+~", substr($word, 0, -1)))
			EnglishStemmer::_replace($word, 'y', 'i');
		return $word;
	}
	
	function _step2($word) {
		switch(substr($word, -2, 1)) {
			case 'a':
				EnglishStemmer::_replace($word, 'ational', 'ate', 0)
				|| EnglishStemmer::_replace($word, 'tional', 'tion', 0);
			break;
		
			case 'c':
				EnglishStemmer::_replace($word, 'enci', 'ence', 0)
				|| EnglishStemmer::_replace($word, 'anci', 'ance', 0);
			break;
		
			case 'e':
				EnglishStemmer::_replace($word, 'izer', 'ize', 0);
			break;
		
			case 'g':
				EnglishStemmer::_replace($word, 'logi', 'log', 0);
			break;
		
			case 'l':
				EnglishStemmer::_replace($word, 'entli', 'ent', 0)
				|| EnglishStemmer::_replace($word, 'ousli', 'ous', 0)
				|| EnglishStemmer::_replace($word, 'alli', 'al', 0)
				|| EnglishStemmer::_replace($word, 'bli', 'ble', 0)
				|| EnglishStemmer::_replace($word, 'eli', 'e', 0);
			break;
		
			case 'o':
				EnglishStemmer::_replace($word, 'ization', 'ize', 0)
				|| EnglishStemmer::_replace($word, 'ation', 'ate', 0)
				|| EnglishStemmer::_replace($word, 'ator', 'ate', 0);
			break;
		
			case 's':
				EnglishStemmer::_replace($word, 'iveness', 'ive', 0)
				|| EnglishStemmer::_replace($word, 'fulness', 'ful', 0)
				|| EnglishStemmer::_replace($word, 'ousness', 'ous', 0)
				|| EnglishStemmer::_replace($word, 'alism', 'al', 0);
			break;
		
			case 't':
				EnglishStemmer::_replace($word, 'biliti', 'ble', 0)
				|| EnglishStemmer::_replace($word, 'aliti', 'al', 0)
				|| EnglishStemmer::_replace($word, 'iviti', 'ive', 0);
			break;
		}
		
		return $word;
	}
	
	function _step3($word) {
		switch(substr($word, -2, 1)) {
			case 'a':
				EnglishStemmer::_replace($word, 'ical', 'ic', 0);
			break;
				
			case 's':
				EnglishStemmer::_replace($word, 'alise', 'al', 0)
				|| EnglishStemmer::_replace($word, 'ness', '', 0);
			break;
				
			case 't':
				EnglishStemmer::_replace($word, 'icate', 'ic', 0)
				|| EnglishStemmer::_replace($word, 'iciti', 'ic', 0);
			break;
				
			case 'u':
				EnglishStemmer::_replace($word, 'ful', '', 0);
			break;
				
			case 'v':
				EnglishStemmer::_replace($word, 'ative', '', 0);
			break;
				
			case 'z':
				EnglishStemmer::_replace($word, 'alize', 'al', 0);
			break;
		}
		
		return $word;
	}
	
	function _step4($word) {
		switch(substr($word, -2, 1)) {
			case 'a':
				EnglishStemmer::_replace($word, 'al', '', 1);
			break;
		
			case 'c':
				EnglishStemmer::_replace($word, 'ance', '', 1)
				|| EnglishStemmer::_replace($word, 'ence', '', 1);
			break;
		
			case 'e':
				EnglishStemmer::_replace($word, 'er', '', 1);
				break;
		
			case 'i':
				EnglishStemmer::_replace($word, 'ic', '', 1);
			break;
		
			case 'l':
				EnglishStemmer::_replace($word, 'able', '', 1)
				|| EnglishStemmer::_replace($word, 'ible', '', 1);
			break;
		
			case 'n':
				EnglishStemmer::_replace($word, 'ant', '', 1)
				|| EnglishStemmer::_replace($word, 'ement', '', 1)
				|| EnglishStemmer::_replace($word, 'ment', '', 1)
				|| EnglishStemmer::_replace($word, 'ent', '', 1);
			break;
		
			case 'o':
				if(substr($word, -4) == 'tion' || substr($word, -4) == 'sion')
					EnglishStemmer::_replace($word, 'ion', '', 1);
				else
					EnglishStemmer::_replace($word, 'ou', '', 1);
			break;
		
			case 's':
				EnglishStemmer::_replace($word, 'ism', '', 1);
			break;
		
			case 't':
				EnglishStemmer::_replace($word, 'ate', '', 1)
				|| EnglishStemmer::_replace($word, 'iti', '', 1);
			break;
		
			case 'u':
				EnglishStemmer::_replace($word, 'ous', '', 1);
			break;
		
			case 'v':
				EnglishStemmer::_replace($word, 'ive', '', 1);
			break;
		
			case 'z':
				EnglishStemmer::_replace($word, 'ize', '', 1);
			break;
		}
		
		return $word;
	}
	
	function _step5($word) {
		// Part a
		if(substr($word, -1) == 'e') {
			if(EnglishStemmer::_occurrences(substr($word, 0, -1)) > 1) {
				EnglishStemmer::_replace($word, 'e', '');
			} elseif(EnglishStemmer::_occurrences(substr($word, 0, -1)) == 1) {
				if(!EnglishStemmer::_cvc(substr($word, 0, -1)))
					EnglishStemmer::_replace($word, 'e', '');
			}
		}
		
		// Part b
		if(EnglishStemmer::_occurrences($word) > 1 && EnglishStemmer::_doubleConsonant($word) && substr($word, -1) == 'l')
			$word = substr($word, 0, -1);
		
		return $word;
	}
	
	function _replace(&$str, $check, $repl, $o = null) {
		$len = 0 - strlen($check);
		if(substr($str, $len) == $check) {
			$substr = substr($str, 0, $len);
			if(is_null($o) || EnglishStemmer::_occurrences($substr) > $o)
				$str = $substr . $repl;
			return true;
		}
		return false;
	}
	
	function _occurrences($str) {
		$c = &$this->_c;
		$v = &$this->_v;
		
		$str = preg_replace("~^$c+~", '', $str);
		$str = preg_replace("~$v+$~", '', $str);
		
		$matches = array();
		return preg_match_all("~($v+$c+)~", $str, $matches) !== false ? count($matches[1]) : 0;
	}
	
	function _doubleConsonant($str) {
		$c = &$this->_c;
		$matches = array();
		return preg_match("~$c{2}$~", $str, $matches) && substr($matches[0], 0, 1) == $matches[0]{1};
	}
	
	function _cvc($str) {
		$c = &$this->_c;
		$v = &$this->_v;
		$matches = array();
		return preg_match("~($c$v$c)$~", $str, $matches) && strlen($matches[1]) == 3
				&& ($l = substr($matches[1], 2, 1)) != 'w' && $l != 'x' && $l != 'y';
	}
	
	function &getInstance($key = null) {
		static $instances;
		if(!isset($instances[$key]))
			$instances[$key] = new EnglishStemmer();
		return $instances[$key];
	}
}
?>