<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * Спсок публикаций с интро по алфавиту.
 * 
 * Объект вывода.
 * 
 * @author Rustam Akhmedov
 * @author Sanjar Akhmedov
 * 
 * $Id: publicationlistintro._wc,v 1.14 2007/02/27 11:23:24 sanjar Exp $
 */

class PublicationListIntro extends WCObject {
	var $header;
	var $pid, $srvuri, $publicationid, $glruri;
	var $pageSize, $ohneMian, $reverseOrder, $clause, $from, $to;
	var $more, $cutIntro, $dateFormat;
	var $no404;
	
	function PublicationListIntro() {
		$this->DSTable='dspublication';
		$this->ds_type='publication';
		$this->obj_type='publicationlistintro';
		$this->pageSize=10;
		$this->pid='page';
		$this->srvuri='publication/';
		$this->glruri='gallery/';
		$this->publicationid='publication_id';
		$this->ohneMain=false;
		$this->withCurrent=false;
		$this->more='...';
		$this->cutIntro=NULL;
		$this->dateFormat='[j.m.Y]';
		$this->reverseOrder=false;
		$this->clause=false;
		$this->from='';
		$this->to='';
		$this->no404=false;
		$this->caching=2;
		$this->cached_by_WC=true;
	}
	
	function getCacheId() {
		$page = (int)@$_GET[$this->pid];
		if(--$page < 0) $page = 0;
		$displayed = $this->getDisplayedDocs();
		$cacheId = $this->obj_id.'|p'.$page.'-c'.implode(':', array_keys($displayed));
		return $cacheId;
	}
	
	function fetchData(&$smarty) {
		$result = false;
		$page = (int)@$_GET[$this->pid];
		if(--$page < 0) $page = 0;
		
		$extra_clause = $this->getExtraClause();
		$db = $this->ctx->_getDB();
		$res = $db->query(
			'SELECT id, real_id as rid, gallery, header, intro, img_intro as image, date '.
			'FROM '.$this->DSTable.' '.
			'WHERE ds_id IN ('.$this->ds_id.') AND published!=0 '.($this->ohneMain?'AND main=0 ':'').
			$extra_clause.
			'ORDER BY BINARY header '.(@$this->reverseOrder?'DESC':'ASC').' '.
			'LIMIT '.($page*$this->pageSize).','.$this->pageSize
		);
		
		if(mysql_num_rows($res)>0) {
			$fet = array();
			settype($this->cutIntro, 'int');
			$displayed = $this->getDisplayedDocs();
			$thref='%s?'.$this->publicationid.'=%d';
			while($row = mysql_fetch_assoc($res)) {
				if(isset($fet[$row['rid']])||(!$this->withCurrent&&@$fet[$row['id']])) continue;
				$fet[$row['rid']] = true;
				$news[$row['id']]['header'] = escapeTags($row['header']);
				$news[$row['id']]['href'] = isset($displayed[$row['id']]) ? null : sprintf(&$thref,$this->srvuri,$row['id']);
				$news[$row['id']]['ghref'] = sprintf(&$thref, $this->glruri, $row['id']);
				$news[$row['id']]['image'] = $row['image'];
				$news[$row['id']]['date'] = wcfFormatTime($this->dateFormat, $row['date']);
				$news[$row['id']]['intro'] = $this->cutIntro > 0
					? $this->create_intro($row['intro'], $this->cutIntro)
					: $row['intro'];
			}
			$smarty->assign('header',$this->header);
			$smarty->assign_by_ref('from',$this->from);
			$smarty->assign_by_ref('to',$this->to);
			$smarty->assign_by_ref('more',$this->more);
			$smarty->assign_by_ref('news',$news);
			$result = array('header', 'from', 'to', 'more', 'news');
		} elseif($page > 1 && !$this->no404)
			$this->ctx->throw404();
		mysql_free_result($res);
		return $result;
	}
	
	function getExtraClause() {
		return $this->clause
			? 'AND (BINARY LEFT(header,1)>="'.utf8_strtolower($this->from).'" AND BINARY LEFT(header,1)<="'.utf8_strtolower($this->to).'" OR BINARY LEFT(header,1)>="'.utf8_strtoupper($this->from).'" AND BINARY LEFT(header,1)<="'.utf8_strtoupper($this->to).'") '
			: '';
	}
	
	function &create_intro(&$txt, $size) {
		$txt = strip_tags($txt);
		preg_match('/^.{'.($size-1).'}[^\s\.,:]*/ums', $txt, $intro);
		return @$intro[0] ? $intro[0] : $txt;
	}
	
	function &getDisplayedDocs() {
		if(!isset($this->_dispalyedDocs))
			$this->_displayedDocs = class_exists('publicationbody') ? PublicationBody::getDisplayedDocs() : array();
		return $this->_displayedDocs;
	}
}
?>