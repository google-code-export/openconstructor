<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * @author Sanjar Akhmedov
 * 
 * $Id: hybridagent._wc,v 1.34 2007/04/29 09:51:20 sanjar Exp $
 */
define('DSF_PRIMITIVE', 1);
define('DSF_DOCUMENT', 2);
define('DSF_ARRAY', 3);
define('DSF_DATASOURCE', 4);
define('DSF_TREE', 5);
define('DSF_ENUM', 6);
define('DSF_FILE', 7);
define('DSF_RATING', 8);

define('COND_EQ', 0);
define('COND_BTW', 1);
define('COND_GT', 2);
define('COND_LT', 3);
define('COND_GTEQ', 4);
define('COND_LTEQ', 5);
define('COND_CONTAINS', 6);
define('COND_LIKE', 7);

define('VALUE_CTX', 10);
define('VALUE_PLAIN', 20);

class HybridAgent {
	var $dsId, $dsKey, $dsPath, $dsName;
	var $dsFields = null, $dsTrees = null, $dsFieldNames = null, $sysFields = null;
	var $dsCrumbs = array(), $nodeCrumbs = array();
	var $ctx = null;
	
	function HybridAgent($dsId, $dsKey, $dsPath, $dsName) {
		$this->dsId = $dsId;
		$this->dsKey = $dsKey;
		$this->dsPath = $dsPath;
		$this->dsName = $dsName;
	}
	
	function &getFields() {
		if($this->dsFields === null) {
			$this->dsFields = array();
			$this->dsTrees = array();
			$db = &$this->ctx->_getDB();
			$res = $db->query(
				'SELECT dsf.id, dsf.ds_id, dsf.name, UCASE(dsf.family) AS family, dsf.type, dsf.header, dsf.fromds, dsf.tree, dsf.isarray'.
				' FROM hybriddatasources hds, dshfields dsf'.
				' WHERE hds.ds_id = '.$this->dsId.' AND FIND_IN_SET(dsf.ds_id, hds.path) > 0'
			);
			if(mysql_num_rows($res) > 0)
				while($r = mysql_fetch_assoc($res)) {
					$name = substr($r['name'], 2);
					$id = (int) $r['id'];
					$this->dsFields[$id] = array('ds_id' => $r['ds_id'], 'type' => constant('DSF_'.$r['family']), 'name' => $name, 'header' => $r['header'], 'isarray' => $r['isarray']);
					$this->dsFieldNames[$name] = $id;
					if($r['tree'] > 0)
						$this->dsTrees[$name] = (int) $r['tree'];
					elseif($r['family'] == 'DOCUMENT') {
						$this->dsFields[$id]['ds_type'] = $r['type'];
						$this->dsFields[$id]['from_ds'] = $r['fromds'];
					} elseif($r['family'] == 'ENUM')
						$this->dsFields[$id]['enum_id'] = $r['type'];
				}
			mysql_free_result($res);
		}
		return $this->dsFields;
	}
	
	function &getFieldNames() {
		if($this->dsFields === null)
			$this->getFields();
		return $this->dsFieldNames;
	}
	
	function &getTrees() {
		if($this->dsFields === null)
			$this->getFields();
		return $this->dsTrees;
	}
		
	function &getNodes($nodeIds) {
		$result = array();
		$nodes = &HybridAgent::_getNodesCache();
		settype($nodeIds, 'array');
		$key = (int) $nodeIds[0] > 0 ? 'id' : 'name';
		for($i = 0, $ids = array(), $l = sizeof($nodeIds); $i < $l; $i++)
			if(!isset($nodes[$nodeIds[$i]])) $ids[] = $nodeIds[$i];
		if(sizeof($ids)) {
			$values = $key == 'id' ? implode(',', $ids) : '\''.implode('\',\'', $ids).'\'';
			$db = &$this->ctx->_getDB();
			$res = $db->query("SELECT t.id, t.name, t1.header FROM	catalognode t, catalogtree t1 WHERE	t.{$key} IN ({$values}) AND t.id = t1.id");
			if(mysql_num_rows($res) > 0)
				while($r = mysql_fetch_assoc($res)) {
					settype($r['id'], 'int');
					$nodes[$r['id']] = array('id' => $r['id'], 'key' => $r['name'], 'header' => $r['header']);
					$nodes[$r['name']] = &$nodes[$r['id']];
				}
			mysql_free_result($res);
		}
		for($i = 0; $i < $l; $i++)
			$result[$nodeIds[$i]] = &$nodes[$nodeIds[$i]];
		return $result;
	}
	
	function &getEnumValues($valueIds) {
		$result = array();
		$values = &HybridAgent::_getEnumValuesCache();
		settype($valueIds, 'array');
		for($i = 0, $ids = array(), $l = sizeof($valueIds); $i < $l; $i++)
			if($valueIds[$i] && !isset($values[$valueIds[$i]])) $ids[] = $valueIds[$i];
		if(sizeof($ids)) {
			$db = &$this->ctx->_getDB();
			$res = $db->query('SELECT id, value, header FROM enumvalues WHERE id IN ('.implode(',', $ids).')');
			if(mysql_num_rows($res) > 0)
				while($r = mysql_fetch_assoc($res)) {
					settype($r['id'], 'int');
					$values[$r['id']] = array('id' => $r['id'], 'value' => $r['value'], 'header' => $r['header']);
				}
			mysql_free_result($res);
		}
		for($i = 0; $i < $l; $i++)
			$result[$valueIds[$i]] = &$values[$valueIds[$i]];
		return $result;
	}
	
	function &getAllEnumValues($fieldName, $dsId = null) {
		static $cache;
		$result = null;
		$fn = &$this->getFieldNames();
		if($dsId == null)
			$dsId = $this->dsId;
		if(isset($cache[$dsId][$fieldName])) {
			$result = &$cache[$dsId][$fieldName];
		} else {
			$result = array();
			$dsf = &$this->getFields();
			if($dsId != $this->dsId && $dsId != $this->dsKey) {
				$query = sprintf(
					'SELECT v.id, v.value, v.header FROM %s dshfields f, enumvalues v WHERE %s f.ds_id = %s AND f.family = "enum" AND f.name = "f_%s" AND v.enum_id = f.type'
					, is_int($dsId) ? '' : 'hybriddatasources h,', is_int($dsId) ? '' : 'h.ds_key = "'.addslashes($dsId).'" AND', is_int($dsId) ? intval($dsId) : 'h.ds_id', addslashes($fieldName)
				);
			} else
				$query = 'SELECT id, value, header FROM enumvalues WHERE enum_id = '.intval($dsf[$fn[$fieldName]]['enum_id']);
			$db = &$this->ctx->_getDB();
			$res = $db->query($query);
			while($r = mysql_fetch_row($res))
				$result[$r[0]] = array('value' => $r[1], 'header' => $r[2]);
			mysql_free_result($res);
			$cache[$dsId][$fieldName] = &$result;
		}
		return $result;
	}
	
	function &_getQueryProps(&$fields, $order = array(), $filter = array()) {
		$ctx = &$this->ctx;
		$result = array(
			'fields' => 'd.id, d.ds_id, d.header',
			'tables' => 'dshybrid_'.$this->dsId.' ds JOIN dshybrid d',
			'where' => 'd.id = ds.id',
			'group' => false,
			'order' => ''
		);
		$t = array($this->dsId => true);
		$dsf = &$this->getFields();
		$sf = &$this->_getSystemFields();
		$rRanges = $dss = $dds = array();
		$dr = false;
		for($i = 0, $l = sizeof($fields); $i < $l; $i++) {
			$fId = $fields[$i]['id'];
			$f = &$dsf[$fId];
			if(!$f) continue;
			if(!isset($t[$f['ds_id']])) {
				$result['tables'] .= ' JOIN dshybrid_'.$f['ds_id'].' d'.$i;
				$result['where'] .= ' AND d'.$i.'.id = ds.id';
				$t[$f['ds_id']] = true;
			}
			$result['fields'] .= ',f_'.$f['name'].' AS "'.$fId.'"';
			if($f['type'] == DSF_DATASOURCE) {
				$result['tables'] .= ' LEFT JOIN datasources dss'.$fId.' ON (f_'.$f['name'].' = dss'.$fId.'.ds_id)';
				$result['fields'] .= ',dss'.$fId.'.docs AS "'.$fId.'docs"';
				$dss[$fId] = true;
			} elseif($f['type'] == DSF_DOCUMENT) {
				$result['tables'] .= " LEFT JOIN ds{$f['ds_type']} dds{$fId} ON (f_{$f['name']} = dds{$fId}.id".($f['ds_type'] != 'file' ? " AND dds{$fId}.published)" : ')');
				$result['fields'] .= ',dds'.$fId.($f['ds_type'] == 'file' ? '.name' : ($f['ds_type'] == 'guestbook' ? '.subject ' : '.header ')).' AS "'.$fId.'header"';
				$dds[$fId] = true;
			} elseif($f['type'] == DSF_RATING) {
				$range = $this->_parseRatingRange(@$fields[$i]['range'], $fId);
				$uid = $range['uid'];
				if(sizeof($range) > 1) {
					$result['tables'] .= " LEFT JOIN dsratinglog dsr{$uid} ON (dsr{$uid}.id = f_{$f['name']} AND dsr{$uid}.active AND dsr{$uid}.date BETWEEN {$range['from']} AND {$range['to']})";
					$result['fields'] .= ',ROUND(SUM(dsr'.$uid.'.rating)/SUM(dsr'.$uid.'.votes)) AS "'.$fId.'value",SUM(dsr'.$uid.'.votes) AS "'.$fId.'votes"';
					$result['group'] = $dr = true;
				} else {
					$result['tables'] .= ' LEFT JOIN dsrating dsr'.$uid.' ON (dsr'.$uid.'.id = f_'.$f['name'].')';
					$result['fields'] .= ',dsr'.$uid.'.rating AS "'.$fId.'value",dsr'.$uid.'.raters AS "'.$fId.'votes"';
				}
				$rRanges[$uid] = $fId;
				if($ctx->auth->userId > 0) {
					$result['tables'] .= ' LEFT JOIN dsratinglog dsrl'.$fId.' ON (dsrl'.$fId.'.id = dsr'.$uid.'.id AND dsrl'.$fId.'.user_id = '.intval($ctx->auth->userId).')';
					$result['fields'] .= ',dsrl'.$fId.'.user_id AS "'.$fId.'voted",dsrl'.$fId.'.rating AS "'.$fId.'vote"';
				} else
					$result['fields'] .= ',0 AS "'.$fId.'voted",0 AS "'.$fId.'vote"';
			}
			unset($f);
		}
		$j = 0;
		if(sizeof($order)) {
			for($l = sizeof($order); $j < $l; $j++) {
				$f = null;
				if(is_numeric($order[$j]['id'])) {
					$fId = abs($order[$j]['id']);
					if(isset($dsf[$fId])) {
						$f = &$dsf[$fId];
						$dir = $order[$j]['id'] < 0 ? 'DESC' : '';
					}
				} else {
					$dir = substr($order[$j]['id'], 0, 1) == '-' ? 'DESC' : '';
					$fId = $dir ? substr($order[$j]['id'], 1) : $order[$j]['id'];
					if(isset($sf[$fId]))
						$f = &$sf[$fId];
				}
				if($f) {
					if(!isset($t[$f['ds_id']])) {
						$result['tables'] .= ' JOIN dshybrid_'.$f['ds_id'].' d'.($i + $j);
						$result['where'] .= ' AND d'.($i + $j).'.id = ds.id';
						$t[$f['ds_id']] = true;
					}
					if($f['type'] == DSF_DATASOURCE) {
						if(!isset($dss[$fId]))
							$result['tables'] .= ' LEFT JOIN datasources dss'.$fId.' ON (f_'.$f['name'].' = dss'.$fId.'.ds_id)';
						$result['order'] .= ", dss{$fId}.docs $dir";
					} elseif($f['type'] == DSF_DOCUMENT) {
						if(!isset($dds[$fId])) {
							$result['tables'] .= " LEFT JOIN ds{$f['ds_type']} dds{$fId} ON (f_{$f['name']} = dds{$fId}.id".($f['ds_type'] != 'file' ? " AND dds{$fId}.published)" : ')');
							$result['order'] .= ", dds{$fId}.".($f['ds_type'] == 'file' ? 'name ' : ($f['ds_type'] == 'guestbook' ? 'subject ' : 'header ')).$dir;
						} else
							$result['order'] .= ", \"{$fId}header\" $dir";
					} elseif($f['type'] == DSF_TREE && !$f['isarray']) {
						$result['tables'] .= " LEFT JOIN catalognode cn{$fId} ON (f_{$f['name']} = cn{$fId}.id)";
						$result['order'] .= ", cn{$fId}.num $dir";
					} elseif($f['type'] == DSF_RATING) {
						$range = $this->_parseRatingRange(@$order[$j]['range'], $fId);
						$uid = $range['uid'];
						if(!isset($rRanges[$uid])) {
							if(sizeof($range) > 1) {
								$result['tables'] .= " LEFT JOIN dsratinglog dsr{$uid} ON (dsr{$uid}.id = f_{$f['name']} AND dsr{$uid}.active AND dsr{$uid}.date BETWEEN {$range['from']} AND {$range['to']})";
								$result['fields'] .= ',SUM(dsr'.$uid.'.rating)/SUM(dsr'.$uid.'.votes) AS "'.$uid.'value",SUM(dsr'.$uid.'.votes) AS "'.$uid.'votes", '.($dr ? 'COUNT(DISTINCT dsr'.$uid.'.user_id)' : '1').' AS "'.$fId.'h"';
								$result['group'] = true;
								$result['order'] .= ", \"{$uid}value\" $dir, \"{$uid}votes\" $dir";
							} else {
								$result['tables'] .= ' LEFT JOIN dsrating dsr'.$uid.' ON (dsr'.$uid.'.id = f_'.$f['name'].')';
								$result['order'] .= ", dsr{$uid}.rating $dir, dsr{$uid}.raters $dir";
							}
						} else
							$result['order'] .= ", \"{$rRanges[$uid]}value\" $dir, \"{$rRanges[$uid]}votes\" $dir";
						$rRanges[$uid] = $fId;
					} else
						$result['order'] .= sprintf(", %s{$f['name']} $dir", isset($f['sys'])? '': 'f_');
					unset($f);
				}
			}
		}
		if($result['order']) $result['order'] = substr($result['order'], 1);
		$i += $j;
		
		if(sizeof($filter)) {
			$fn = &$this->getFieldNames();
			for($j = 0, $l = sizeof($filter); $j < $l; $j++) {
				$cond = &$filter[$j];
				$type = abs($cond[0]) % 10;
				if(intval(abs($cond[0]) / 10) == 1)
					$value = $ctx->getParam($cond[1]);
				else
					$value = $cond[1];
				$invert = $cond[0] < 0;
				$fId = substr($cond[2], 0, 1) == '$' ? $ctx->getParam(substr($cond[2], 1)) : $cond[2];
				if(isset($sf[$fId])) {
					$f = &$sf[$fId];
				} elseif(isset($dsf[$fId])) {
					$f = &$dsf[$fId];
				} elseif(isset($fn[$fId])) {
					$f = &$dsf[$fn[$fId]];
				} else
					$f = null;
				if(is_array($f)) {
					if($f['type'] == DSF_ENUM && !($type == COND_EQ || ($f['isarray'] && $type == COND_CONTAINS) || ($f['isarray'] && $type == COND_BTW)))
						continue;
					if(!isset($t[$f['ds_id']])) {
						$result['tables'] .= ' JOIN dshybrid_'.$f['ds_id'].' d'.($i + $j);
						$result['where'] .= ' AND d'.($i + $j).'.id = ds.id';
						$t[$f['ds_id']] = true;
					}
					if($f['type'] == DSF_ENUM) {
						if(strspn($value, '0123456789') == strlen($value))
							$result['where'] .= ' AND '.$this->_compileClause('f_'.$f['name'], $f['isarray'] ? COND_CONTAINS : $type, $value, $invert);
						elseif(($clause = $this->_compileClause("env$j.value", $f['isarray'] ? COND_EQ : $type, $value, $invert)) != 1) {
							$result['tables'] .= ' LEFT JOIN enumvalues env'.$j.' ON ('.(
								$f['isarray'] ? "FIND_IN_SET(env$j.id, f_{$f['name']}) " : "env$j.id = BINARY f_{$f['name']} "
							).')';
							$result['where'] .= ' AND '.$clause;
						}
					} elseif($f['type'] == DSF_RATING) {
						$range = $this->_parseRatingRange('', $cond[2]);
						if(isset($rRanges[$range['uid']]))
							$result['where'] .= ' AND '.$this->_compileClause("dsr{$range['uid']}.rating", $type, $value, $invert);
					} else
						$result['where'] .= ' AND '.$this->_compileClause(isset($f['sys']) ? $f['name'] : 'f_'.$f['name'], $type, $value, $invert);
				}
			}
		}
		if($result['order']) $result['order'] = substr($result['order'], 1);
		return $result;
	}
	
	function &_getSystemFields() {
		if(!isset($this->sysFields))
			$this->sysFields = array(
				'id' => array('ds_id' => $this->dsId, 'type' => DSF_PRIMITIVE, 'name' => 'ds.id', 'isarray' => false, 'sys' => true),
				'header' => array('ds_id' => $this->dsId, 'type' => DSF_PRIMITIVE, 'name' => 'd.header', 'isarray' => false, 'sys' => true)
			);
		return $this->sysFields;
	}
	
	function &_getDs($dsId) {
		static $datasources;
		settype($dsId, 'int');
		if(!isset($datasources[$dsId])) {
			require_once(LIBDIR.'/dsmanager._wc');
			$dsm = new DSManager();
			$ds = &$dsm->load($dsId);
			$datasources[$dsId] = & $ds;
		}
		return $datasources[$dsId];
	}
	
	function &_parseRatingRange($range, $salt = '') {
		require_once(LIBDIR.'/func/parseratingrange._wc');
		return wcfParseRatingRange($range, $salt);
	}
	
	function &getInstance($dsId, $type = null, $onlySub = false) {
		static $instance;
		if(!isset($instance[$dsId])) {
			$dsKey = null;
			if(intval($dsId) > 0) $dsId = (int) $dsId; else	$dsKey = $dsId;
			$ctx = &Context::getInstance();
			$db = &$ctx->_getDB();
			$res = $db->query(
				'SELECT hds.ds_id, hds.ds_key, hds.path, ds.name'.
				' FROM '.($dsKey == null ? 'hybriddatasources hds0, ' : '').'hybriddatasources hds, datasources ds'.
				' WHERE '.($dsKey == null ? "hds0.ds_id = $dsId AND" : '').
					' INSTR(hds.ds_key, '.($dsKey != null ? '"'.addslashes($dsKey).'"' : 'hds0.ds_key').') = 1'.
					' AND hds.ds_id = ds.ds_id'.
				' ORDER BY hds.ds_key ASC'
			);
			if(mysql_num_rows($res) > 0) {
				$r = mysql_fetch_assoc($res);
				$dsId = (int) $r['ds_id'];
				$dsKey = $r['ds_key'];
				$dsName = $r['name'];
				$path = array_flip(explode(',', substr($r['path'], 2))); $pos = 0;
				foreach($path as $id => $v) {
					$pos = strpos($dsKey, '.', $pos + 1);
					$path[$id] = $pos > 0 ? substr($dsKey, 0, $pos) : $dsKey;
				}
				while($r = mysql_fetch_row($res))
					$path[(int) $r[0]] = $r[1];
				$instance[$dsId] = new HybridAgent($dsId, $dsKey, &$path, $dsName);
				$instance[$dsId]->ctx = &$ctx;
				$instance[$dsKey] = &$instance[$dsId];
			} else
				$instance[$dsId] = null;
			mysql_free_result($res);
		}
		if($type && is_object($instance[$dsId]) && ($type != $dsId
			? (!isset($instance[$dsId]->dsPath[$type]) || strlen($instance[$dsId]->dsPath[$type]) > strlen($instance[$dsId]->dsKey))
			: $onlySub
			)) {
			$result = null;
			return $result;
		} else
			return $instance[$dsId];
	}
	
	function _changeDsCrumbs(&$crumbs, $key) {
		if($key && !isset($this->dsCrumbs[$key])) {
			$this->dsCrumbs[$key] = true;
			$crumbs->set($key, $this->dsName);
		}
	}
	
	function _changeNodeCrumbs(&$crumbs, $key) {
		if($key && !isset($this->nodeCrumbs[$key])) {
			$this->nodeCrumbs[$key] = true;
			$nodeId = addslashes($this->ctx->getParam($key));
			if($nodeId && strpos($nodeId, ',') === false) {
				$node = &$this->getNodes($nodeId);
				if(sizeof($node) == 1) {
					$crumbs->set($key, addslashes($node[$nodeId]['header']));
				}
			}
		}
	}
	
	function _compileClause($name, $type, $value, $invert = false) {
		$quote = utf8_substr($value, 0, 1); $in = false;
		if($quote == utf8_substr($value, -1) && ($quote == '"' || $quote == '\'' || $quote == '`'))
			$value = utf8_substr($value, 1, -1);
		else
			$quote = '';
		switch($type) {
			case COND_EQ:
				// $value = explode($quote.'|'.$quote, $value);
				$value = explode($quote.','.$quote, $value);
				if($value[0] == '*') {
					return 1;
				} elseif(sizeof($value) > 1) {
					$in = true;
					array_walk($value, create_function('&$v, &$k', '$v = addslashes($v);'));
					$value = '("'.implode('","', $value).'")';
				} else
					$value = '"'.$value[0].'"';
			break;
			case COND_BTW:
				$value = explode($quote.'-'.$quote, $value);
				if(sizeof($value) != 2)
					return 0;
				$value = sprintf('"%s" AND "%s"', addslashes($value[0]), addslashes($value[1]));
			break;
			case COND_CONTAINS: // This function will not work properly if $value contains a comma (',') character  -- (C) MySQL Doc.
				$name = 'FIND_IN_SET("'.addslashes($value)."\", $name)";	
				$value = 0;
			default:
				$value = '"'.addslashes($value).'"';
		}
		$cond = array($in ? 'IN' : '=', 'BETWEEN', '>', '<', '>=', '<=', '>', 'LIKE');
		return $invert ? "NOT ($name {$cond[$type]} $value)" : "$name {$cond[$type]} $value";
	}
	
	function &_getNodesCache() {
		static $nodes;
		return $nodes;
	}
	
	function &_getEnumValuesCache() {
		static $values;
		return $values;
	}
}
?>