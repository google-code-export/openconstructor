<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * Объект для добавления новых сообщений.
 * 
 * @author Sanjar Akhmedov
 * 
 * $Id: gbaddmsglogic._wc,v 1.19 2007/03/15 06:57:05 sanjar Exp $
 */

require_once(LIBDIR.'/wcmessage._wc');

define('GBAML_ADD_AS_FROMAUTH', 0);
define('GBAML_ADD_AS_DSOWNER', 1);
define('GBAML_ADD_AS_SPECIFIED', 2);
	
class GBAddMsgLogic extends WCObject {
	var $fields;
	var $notifyEmail, $mailSubject;
	var $policy, $addAs, $ignoreDsAuths;
	var $cId, $cVal, $closeSess;
	
	function GBAddMsgLogic()
	{
		$this->DSTable='dsguestbook';
		$this->ds_type='guestbook';
		$this->obj_type='gbaddmsglogic';
		$this->notifyEmail=false;
		$this->fields=array(
			'subject'=>array(
				'id'=>'gb_subject',
				'required'=>true
			),
			'message'=>array(
				'id'=>'gb_message',
				'required'=>true
			),
			'author'=>array(
				'id'=>'gb_author',
				'required'=>true
			),
			'email'=>array(
				'id'=>'gb_email',
				'required'=>true
			)
		);
		$this->policy = GBAML_ADD_AS_FROMAUTH;
		$this->addAs = null;
		$this->ignoreDsAuths = false;
		$this->cId = 'cid';
		$this->cVal = 'f_cid';
		$this->closeSess = true;
	}
	
	function onPageLoad() {
		$this->success = false;
	}
	
	function exec(&$smarty, $params = array()) {
		if(!$this->defaultGB)
			return;
		$ds_id = $this->getDsId();
		
		require_once(LIBDIR.'/dsmanager._wc');
		$dsm = new DSManager();
		$ref = parse_url($_SERVER['HTTP_REFERER']);
		$query = array();
		parse_str(@$ref['query'], $query);
		$path = $ref['path'];
		$ref = $ref['scheme'].'://'.$ref['host'].$path;
		$correct=true;
		foreach($this->fields as $k => $v)
			if(@$_POST[$v['id']]) {
				$query[$v['id']] = $_POST[$v['id']];
			} elseif($v['required']) {
				unset($query[$v['id']]);
				$correct = false;
			}
		if($this->cId) {
			$word = (string) @$_SESSION['_cid'][(string) @$_GET[$this->cId]];
			if($correct) {
				$correct = false;
				$value = strtolower((string) @$_POST[$this->cVal]);
				if($word && $value && ($word == $value))
					$correct = true;
				$query[$this->cVal] = $correct ? 1 : 0;
			} else
				$query[$this->cVal] = 1;
			if($word) {
				unset($_SESSION['_cid'][(string) @$_GET[$this->cId]]);
				if(!sizeof((array) @$_SESSION['_cid']))
					unset($_SESSION['_cid']);
			}
			if($this->closeSess && isset($_SESSION) && !sizeof($_SESSION)) {
				@session_unset();
				@session_destroy();
			}
		}
		if(!$correct) {
			$query['error'] = 'true';
			foreach($query as $k => $v)
				$query[$k] = $k.'='.rawurlencode($v);
			sendRedirect($ref.'?'.implode('&', $query));
			die();
		}
		if(!$ds = $dsm->load($ds_id)) {
			return;
		}
		$subject = @$_POST[$this->fields['subject']['id']];
		$message = (string) @$_POST[$this->fields['message']['id']];
		$author = (string) @$_POST[$this->fields['author']['id']];
		$email = (string) @$_POST[$this->fields['email']['id']];
		if(!$subject)
			$subject = $this->_generateSubject($message, $author, $email, $path);
		if(utf8_strlen($subject) > 254)
			$subject = utf8_substr($subject, 0, 254);
		switch($this->policy) {
			case GBAML_ADD_AS_DSOWNER:
				$ownerId = (int) @$ds->sRes->owner;
			break;
			
			case GBAML_ADD_AS_FROMAUTH:
				$ownerId = (int) $this->ctx->auth->userId;
			break;
			
			case GBAML_ADD_AS_SPECIFIED:
				loadClass('user', '/security/user._wc');
				$user = User::load($this->addAs);
				$ownerId = (int) @$user->id;
			break;
		}
		if($ownerId > 0) {
			loadClass('wcs', '/security/wcs._wc');
			WCS::runAs($this->ignoreDsAuths ? WCS_ROOT_ID : $ownerId);
			if(WCS::decide($ds, 'createdoc')) {
				$id = $ds->add($subject, $message, 'UNIX_TIMESTAMP()', $author, $email);
				if($id) {
					$this->success = (int) $id;
					WCS::runAs(WCS_ROOT_ID);
					$ds->updateDocAuths($id, $ownerId);
					WCS::stopRunAs();
					$this->_notify($id, $ds);
					unset($ds);
				}
			}
			WCS::stopRunAs();
		}
	}
	
	function _generateSubject($message, $author, $email, $path) {
		require_once(LIBDIR_THIRD.'/phputf8/trim.php');
		$result = utf8_substr(utf8_trim(preg_replace('~^\s*(([^\s]+\s+){0,10}).*$~su', '\1', strip_tags($message))), 0, 100);
		if($author) {
			$prefix = $author;
		} elseif($email) {
			$prefix = $email;
		} else {
			$prefix = $path;
		}
		$prefix .= date(', H:i:s');
		return escapeTags($result ? "[$prefix]: $result..." : "[$prefix]: Empty Message");
	}

	function _notify($id, &$ds) {
		if(empty($this->notifyEmail)) return;
		$content = array(
			'msgHref' => "http://{$GLOBALS['_host']}{$GLOBALS['_wchome']}/data/guestbook/edit.php?ds_id={$ds->ds_id}&id={$id}",
			'mgbName' => $ds->name,
			'gbHref' => "http://{$GLOBALS['_host']}{$GLOBALS['_wchome']}/data/?node={$ds->ds_id}"
		);
		$msg = new WCMessage();
		$msg->setTemplate(($this->tpl ? $this->tpl : 'file:'.LIBDIR.'/tpl/'.$this->obj_type).'.tpl');
		$msg->setContentType('text/html');
		$msg->setContent($content);
		$msg->setSubject($this->mailSubject.' ['.$ds->name.']');
		$msg->setFrom('info@'.$_SERVER['HTTP_HOST']);
		$msg->addRecipient($this->notifyEmail);
		$msg->send();
		return;
	}
	
	function getDsId() {
		static $dsId;
		if(!@$this) return;
		if(!isset($dsId[$this->obj_id])) {
			$ds_id = $this->defaultGB;
			if($this->gbid) {
				$gbid = (int) $this->ctx->getParam($this->gbid);
				if($gbid <= 0)
					$gbid = (int) @$_POST[$this->gbid];
				if($gbid > 0 && (!$this->ds_id || array_search($gbid, explode(',', $this->ds_id)) !== false))
					$ds_id = $gbid;
			} elseif($this->ds_id && sizeof(explode(',', $this->ds_id)) == 1)
				$ds_id = $this->ds_id;
			$dsId[$this->obj_id] = $ds_id;
		}
		return $dsId[$this->obj_id];
	}
	
	function &_getDSFields() {
		static $result;
		if(!is_array($result)) $result = array('ds_id', 'defaultGB', 'gbid');
		return $result;
	}
}
?>