<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * Список всех сообщений гостевой книги.
 * 
 * Объект вывода.
 * 
 * @author Sanjar Akhmedov
 * 
 * $Id: gballmessages._wc,v 1.16 2007/02/27 11:23:21 sanjar Exp $
 */
class GBAllMessages extends WCObject {
	var $header;
	var $dateFormat, $reverseOrder;
	var $defaultGB;
	var $gbid;
	
	function GBAllMessages() {
		$this->DSTable='dsguestbook';
		$this->ds_type='guestbook';
		$this->obj_type='gballmessages';
		$this->dateFormat='[j.m.Y]';
		$this->defaultGB=null;
		$this->gbid=null;
		$this->caching=2;
		$this->cached_by_WC=true;
	}
	
	function getCacheId() {
		$cacheId = $this->obj_id.'|ds'.$this->getDsId();
		return $cacheId;
	}
	
	function onPageLoad() {
		if($this->tpl && $this->defaultGB) {
			$ids = explode(',', $this->getDsId());
			foreach($ids as $id)
				GBAllMessages::_addDisplayed($id);
		}
	}
	
	function fetchData(&$smarty) {
		$result = false;
		if(!$this->defaultGB) return $result;
		$ds_id = $this->getDsId();
		$multi = strpos($ds_id, ',');
		$db = $this->ctx->_getDB();
		$res = $db->query(
			'SELECT d.id, d.real_id as rid,d.subject,d.author,d.email,d.html,d.date'.($multi ? '' : ', ds.name').
			' FROM '.$this->DSTable.' d'.($multi ? '' : ', datasources ds').
			' WHERE d.ds_id IN ('.$ds_id.') AND d.published!=0'.($multi ? '' : ' AND ds.ds_id = d.ds_id').
			' ORDER BY d.date '.($this->reverseOrder ? ' ASC' : ' DESC')
		);
		if(mysql_num_rows($res) > 0) {
			$fet = array();
			$dsname = -1;
			while($row=mysql_fetch_assoc($res)) {
				if($dsname === -1) $dsname = @$row['name'];
				if(isset($fet[$row['rid']])) continue;
				$fet[$row['rid']] = true;
				$msg[$row['id']]['subject']=escapeTags($row['subject']);
				$msg[$row['id']]['author']=escapeTags($row['author']);
				$msg[$row['id']]['email']=htmlspecialchars($row['email'], ENT_COMPAT, 'UTF-8');
				$msg[$row['id']]['date']=wcfFormatTime($this->dateFormat, $row['date']);
				$msg[$row['id']]['content']=$row['html'];
			}
		} else {
			$msg = array();
			$dsname = '';
		}
		$smarty->assign('header', $this->header);
		$smarty->assign_by_ref('messages', $msg);
		$smarty->assign('datasource', $dsname);
		$result = array('header', 'messages');
		mysql_free_result($res);
		return $result;
	}
	
	function getDsId() {
		static $dsId;
		if(!@$this) return;
		if(!isset($dsId[$this->obj_id])) {
			$ds_id = $this->ds_id;
			if($this->gbid){
				$gbid = $this->ctx->getParam($this->gbid);
				if($gbid != 'all') {
					settype($gbid, 'int');
					if($gbid > 0 && (!$this->ds_id || array_search($gbid, explode(',', $this->ds_id)) !== false)) {
						$ds_id = $gbid;
					} else
						$ds_id = $this->defaultGB;
				}
			}
			$dsId[$this->obj_id] = $ds_id;
		}
		return $dsId[$this->obj_id];
	}
	
	function &getDisplayedDs() {
		$result = GBAllMessages::_addDisplayed(null, true);
		return $result;
	}
	
	function _addDisplayed($id, $return = false) {
		static $displayed;
		if($id) $displayed[(int) $id] = true;
		if($return)	return $displayed;
	}
	
	function &_getDSFields() {
		static $result;
		if(!is_array(&$result)) $result = array('ds_id', 'defaultGB', 'gbid');
		return $result;
	}
}
?>