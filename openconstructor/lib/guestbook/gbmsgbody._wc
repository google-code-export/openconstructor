<?php
/**
 * Copyright 2003 - 2007 eSector Solutions, LLC
 * 
 * All rights reserved.
 * 
 * This file is part of Open Constructor (http://www.openconstructor.org/).
 * 
 * Open Constructor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 * 
 * Open Constructor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html
 * 
 * Вывод сообщения(Гостевая книга).
 * 
 * Объект вывода.
 * 
 * @author Rustam Akhmedov
 * 
 * $Id$
 */

class GBMsgBody extends WCObject {
	var $header;
	var $messageid;
	var $dateFormat;
	var $doc_id;
	var $no404;
	var $showUnpublished;
	
	function GBMsgBody() {
		$this->DSTable = 'dsguestbook';
		$this->ds_type = 'guestbook';
		$this->obj_type = 'gbmsgbody';
		$this->messageid = 'msg_id';
		$this->dateFormat = '[j.m.Y]';
		$this->showUnpublished = false;
		$this->no404 = false;
		$this->caching = 2;
		$this->cached_by_WC = true;
		
	}
	
	function getCacheId() {
		return $this->obj_id.'|'.$this->getDocId(); 
	}
	
	function onPageLoad() {
		self::_addDisplayed($this->getDocId());
	}
	
	function fetchData(&$smarty) {
		$result = false;
		$msg = $this->getDocument();
		if(sizeof($msg) > 0) {
			$smarty->assign('header', $this->header);
			$smarty->assign_by_ref('message', $msg);
			$result = array('header', 'message');
		} elseif(!$this->no404)
			$this->ctx->throw404();
		return $result;
	}
	
	function &getDocument() {
		if(!isset($this->doc)) {
			$this->doc = array();
			$id = $this->getDocId();
			if($id > 0) {
				$dsIdCheck = $this->ds_id ? 'AND ds_id IN ('.$this->ds_id.')' : '';
				$db = $this->ctx->_getDB();
				$res = $db->query(
					'SELECT real_id as id,  subject, author, email, html, date'.
					' FROM '.$this->DSTable.
					' WHERE id='.$id.($this->showUnpublished?' ':' AND published!=0 ').$dsIdCheck.
					' LIMIT 1'
				);
				if($r = mysql_fetch_assoc($res)) {
					$this->doc['id'] = $r['id'];
					$this->doc['subject'] = escapeTags($r['subject']);
					$this->doc['author'] = escapeTags($r['author']);
					$this->doc['email'] = htmlspecialchars($r['email'], ENT_COMPAT, 'UTF-8');
					$this->doc['html'] = $r['html'];
					$this->doc['date'] = wcfFormatTime($this->dateFormat, $r['date']);
				}
				mysql_free_result($res);
			}
		}
		return $this->doc;
	}
	
	function changeCrumbs(&$crumbs) {
		if($this->isCached()) {
			$header = '';
			$id = $this->getDocId();
			if($id > 0) {
				$dsIdCheck = $this->ds_id ? 'AND ds_id IN ('.$this->ds_id.')' : '';
				$db = $this->ctx->_getDB();
				$res = $db->query(
					'SELECT subject FROM '.$this->DSTable.' WHERE id='.$id.' AND published!=0 '.$dsIdCheck.' LIMIT 1'
				);
				if($r = mysql_fetch_row($res))
					$header = htmlspecialchars($r[0], ENT_COMPAT, 'UTF-8');
				mysql_free_result($res);
			}
		} else {
			$msg = $this->getDocument();
			$header = @$msg['subject'];
		}
		$crumbs->set($this->ctx->page->uri, $header);
	}
	
	function getDocId() {
		if(!$this->doc_id)
			$this->doc_id = (int) $this->ctx->getParam($this->messageid);
		return $this->doc_id;
	}
	
	function &getDisplayedDocs() {
		$result = self::_addDisplayed(null, true);
		return $result;
	}
	
	function _addDisplayed($id, $return = false) {
		static $displayed;
		if($id) $displayed[(int) $id] = true;
		if($return)	return $displayed;
	}
}
?>